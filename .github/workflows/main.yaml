name: "pre-release"

on:
  push:
    branches:
      - 'main'

jobs:
  doxygen:
    runs-on: ubuntu-20.04
    if: "contains(github.event.head_commit.message, '--build-docs')"
    steps:
    - uses: actions/checkout@v1
    - name: install dependencies
      run: sudo apt install doxygen graphviz
    - name: generate docs
      run: doxygen
    - name: Deploy
      uses: s0/git-publish-subdir-action@master
      env:
        REPO: self
        BRANCH: gh-pages
        FOLDER: doc/html
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ubunut20:
    name: "ubuntu compile and test"
    runs-on: "ubuntu-20.04"
    if: "contains(github.event.head_commit.message, '--build-linux')"
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
      - name: install dependencies
        run: | 
          sudo apt-get update
          sudo apt-get install --yes libopencv-dev libsdl2-dev libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavresample-dev libavutil-dev libswresample-dev libswscale-dev libpostproc-dev ninja-build
          GIT_LFS_SKIP_SMUDGE=1 git clone https://git.thm.de/bahn-simulator/simulator-data.git
          
      - uses: BSFishy/meson-build@v1.0.2
        name: build full
        with:
          action: test
          directory: build
          options: --verbose
          meson-version: 0.56.1
      - name: clearing build directory
        run: rm -rf build
          
      - uses: BSFishy/meson-build@v1.0.2
        name: build witout opencv
        with:
          action: test
          setup-options: -Dvideo_backend_opencv=false
          directory: build
          options: --verbose
          meson-version: 0.56.1
      - name: clearing build directory
        run: rm -rf build
        
      - uses: BSFishy/meson-build@v1.0.2
        name: build witout ffmpeg
        with:
          action: test
          setup-options: -Dvideo_backend_ffmpeg=false
          directory: build
          options: --verbose
          meson-version: 0.56.1
      - name: clearing build directory
        run: rm -rf build
        
      - uses: BSFishy/meson-build@v1.0.2
        name: build without sdl
        with:
          action: test
          setup-options: -Dvideo_backend_sdl=false
          directory: build
          options: --verbose
          meson-version: 0.56.1
      - name: clearing build directory
        run: rm -rf build
        
      - uses: BSFishy/meson-build@v1.0.2
        name: build without sdl & ffmpeg
        with:
          action: test
          setup-options: -Dvideo_backend_sdl=false -Dvideo_backend_ffmpeg=false
          directory: build
          options: --verbose
          meson-version: 0.56.1
      - name: clearing build directory
        run: rm -rf build
          
      - uses: BSFishy/meson-build@v1.0.2
        name: build without sdl & ffmpeg & opencv
        with:
          action: test
          setup-options: -Dvideo_backend_sdl=false -Dvideo_backend_ffmpeg=false -Dvideo_backend_opencv=false
          directory: build
          options: --verbose
          meson-version: 0.56.1
      - name: clearing build directory
        run: rm -rf build


  windows:
    name: "windows compile and test"
    runs-on: "windows-latest"
    steps:
      - uses: actions/checkout@v1
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            git
      - name: clone dependencies in msys2
        run: git clone https://git.thm.de/bahn-simulator/setup-scripts.git
        shell: msys2 {0}
      - name: install dependencies in msys2
        run: bash ./setup-scripts/user/msys2_install_only.sh
        shell: msys2 {0}
      - name: compile libtrainsim 
        shell: msys2 {0}
        run: |
          meson setup -Ddefault_library=static -Db_lto=false build
          meson compile -C build
          GIT_LFS_SKIP_SMUDGE=1 git clone https://git.thm.de/bahn-simulator/simulator-data.git
          meson test -C build

  pre-release:
    name: "Pre Release latest"
    runs-on: "ubuntu-20.04"
    needs: [windows, ubunut20]
    steps:
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            LICENSE
            
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: build-artifact-${{ matrix.os }}-${{ matrix.compiler }}
          path: .
